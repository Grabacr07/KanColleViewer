<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:controls="clr-namespace:Grabacr07.Desktop.Metro.Controls;assembly=Desktop.Metro"
					xmlns:chrome="clr-namespace:Grabacr07.Desktop.Metro.Chrome;assembly=Desktop.Metro"
					xmlns:converters="clr-namespace:Grabacr07.Desktop.Metro.Converters;assembly=Desktop.Metro">

	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
	<converters:WindowStateToVisibilityConverter x:Key="WindowStateToVisiblityConverter" />


	<Color x:Key="ThemeColorKey">#FF2D2D30</Color>
	<SolidColorBrush x:Key="ThemeBrushKey"
					 Color="#FF2D2D30" />

	<Color x:Key="BackgroundColorKey">#FF1B1B1C</Color>
	<SolidColorBrush x:Key="BackgroundBrushKey"
					 Color="#FF1B1B1C" />

	<Color x:Key="BorderColorKey">#FF3F3F46</Color>
	<SolidColorBrush x:Key="BorderBrushKey"
					 Color="#FF3F3F46" />

	<Color x:Key="SemiactiveBackgroundColorKey">#FF333337</Color>
	<SolidColorBrush x:Key="SemiactiveBackgroundBrushKey"
					 Color="#FF333337" />

	<Color x:Key="SemiactiveBorderColorKey">#FF3F3F46</Color>
	<SolidColorBrush x:Key="SemiactiveBorderBrushKey"
					 Color="#FF3F3F46" />

	<Color x:Key="ActiveBackgroundColorKey">#FF3F3F46</Color>
	<SolidColorBrush x:Key="ActiveBackgroundBrushKey"
					 Color="#FF3F3F46" />

	<Color x:Key="ActiveBorderColorKey">#FF3F3F46</Color>
	<SolidColorBrush x:Key="ActiveBorderBrushKey"
					 Color="#FF3F3F46" />

	<Color x:Key="InactiveBackgroundColorKey">#FF2D2D30</Color>
	<SolidColorBrush x:Key="InactiveBackgroundBrushKey"
					 Color="#FF2D2D30" />

	<Color x:Key="InactiveBorderColorKey">#FF3C3C41</Color>
	<SolidColorBrush x:Key="InactiveBorderBrushKey"
					 Color="#FF3C3C41" />

	<Color x:Key="HighlightBackgroundColorKey">#FF686868</Color>
	<SolidColorBrush x:Key="HighlightBackgroundBrushKey"
					 Color="#FF686868" />

	<Color x:Key="HighlightBorderColorKey">#FF686868</Color>
	<SolidColorBrush x:Key="HighlightBorderBrushKey"
					 Color="#FF686868" />

	<Color x:Key="Highlight2BackgroundColorKey">#FFA0A0A0</Color>
	<SolidColorBrush x:Key="Highlight2BackgroundBrushKey"
					 Color="#FFA0A0A0" />

	<Color x:Key="Highlight3BackgroundColorKey">#FFC8C8C8</Color>
	<SolidColorBrush x:Key="Highlight3BackgroundBrushKey"
					 Color="#FFC8C8C8" />


	<Color x:Key="ForegroundColorKey">#FFC8C8C8</Color>
	<SolidColorBrush x:Key="ForegroundBrushKey"
					 Color="#FFC8C8C8" />

	<Color x:Key="ActiveForegroundColorKey">White</Color>
	<SolidColorBrush x:Key="ActiveForegroundBrushKey"
					 Color="White" />

	<Color x:Key="SemiActiveForegroundColorKey">#FFA0A0A0</Color>
	<SolidColorBrush x:Key="SemiActiveForegroundBrushKey"
					 Color="#FFA1A0A0" />

	<Color x:Key="InactiveForegroundColorKey">#FF787878</Color>
	<SolidColorBrush x:Key="InactiveForegroundBrushKey"
					 Color="#FF787878" />

	<Color x:Key="HighlightForegroundColorKey">White</Color>
	<SolidColorBrush x:Key="HighlightForegroundBrushKey"
					 Color="White" />

	<Color x:Key="LinkForegroundColorKey">#FF7AC1FF</Color>
	<SolidColorBrush x:Key="LinkForegroundBrushKey"
					 Color="#FF7AC1FF" />

	<Color x:Key="ActiveLinkForegroundColorKey">#FF007ACC</Color>
	<SolidColorBrush x:Key="ActiveLinkForegroundBrushKey"
					 Color="#FF007ACC" />


	<Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle StrokeThickness="1"
							   Stroke="{DynamicResource ForegroundBrushKey}"
							   StrokeDashArray="1 3"
							   SnapsToDevicePixels="true" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type ToolTip}"
		   TargetType="ToolTip">
		<Setter Property="OverridesDefaultStyle"
				Value="True" />
		<Setter Property="HasDropShadow"
				Value="True" />
		<Setter Property="Foreground"
				Value="{DynamicResource AccentForegroundBrushKey}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<Border Name="Border"
							BorderThickness="1"
							BorderBrush="{DynamicResource BorderBrushKey}"
							Background="{DynamicResource BackgroundBrushKey}"
							Padding="6,4"
							SnapsToDevicePixels="True">
						<ContentPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style TargetType="{x:Type Button}">
		<Setter Property="Background"
				Value="{DynamicResource BackgroundBrushKey}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource BorderBrushKey}" />
		<Setter Property="Foreground"
				Value="{DynamicResource ActiveForegroundBrushKey}" />
		<Setter Property="Padding"
				Value="8,2" />
		<Setter Property="FocusVisualStyle"
				Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Background="{TemplateBinding Background}">
						<ContentPresenter x:Name="contentPresenter"
										  Margin="{TemplateBinding Padding}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource ActiveBackgroundBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
			</Trigger>
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource AccentBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
				<Setter Property="Foreground"
						Value="{DynamicResource AccentForegroundBrushKey}" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter Property="Background"
						Value="{DynamicResource InactiveBackgroundBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource InactiveBorderBrushKey}" />
				<Setter Property="Foreground"
						Value="{DynamicResource InactiveForegroundBrushKey}" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style TargetType="{x:Type ToggleButton}">
		<Setter Property="Background"
				Value="{DynamicResource BackgroundBrushKey}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource BorderBrushKey}" />
		<Setter Property="Foreground"
				Value="{DynamicResource ActiveForegroundBrushKey}" />
		<Setter Property="Padding"
				Value="8,2" />
		<Setter Property="FocusVisualStyle"
				Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Background="{TemplateBinding Background}">
						<ContentPresenter x:Name="contentPresenter"
										  Margin="{TemplateBinding Padding}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource ActiveBackgroundBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
			</Trigger>
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource AccentBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
				<Setter Property="Foreground"
						Value="{DynamicResource AccentForegroundBrushKey}" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter Property="Background"
						Value="{DynamicResource InactiveBackgroundBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource InactiveBorderBrushKey}" />
				<Setter Property="Foreground"
						Value="{DynamicResource InactiveForegroundBrushKey}" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style TargetType="{x:Type CheckBox}">
		<Setter Property="Background"
				Value="{DynamicResource ActiveBackgroundBrushKey}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource ActiveBorderBrushKey}" />
		<Setter Property="Foreground"
				Value="{DynamicResource ActiveForegroundBrushKey}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="FocusVisualStyle"
				Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid x:Name="templateRoot"
						  Background="Transparent"
						  SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border x:Name="checkBoxBorder"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="1"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<Grid x:Name="markGrid">
								<Path x:Name="optionMark"
									  Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z"
									  Fill="{DynamicResource ForegroundBrushKey}"
									  Margin="1"
									  Opacity="0"
									  Stretch="None" />
								<Rectangle x:Name="indeterminateMark"
										   Fill="{DynamicResource ForegroundBrushKey}"
										   Margin="2"
										   Opacity="0" />
							</Grid>
						</Border>
						<ContentPresenter x:Name="contentPresenter"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  Content="{TemplateBinding Content}"
										  Grid.Column="1"
										  ContentStringFormat="{TemplateBinding ContentStringFormat}"
										  Focusable="False"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}"
										  RecognizesAccessKey="True"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent"
								 Value="True">
							<Setter Property="FocusVisualStyle">
								<Setter.Value>
									<Style>
										<!-- ReSharper disable once Xaml.RedundantPropertyTypeQualifier -->
										<Setter Property="Control.Template">
											<Setter.Value>
												<ControlTemplate>
													<Rectangle Margin="14,0,0,0"
															   SnapsToDevicePixels="True"
															   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
															   StrokeThickness="1"
															   StrokeDashArray="1 2" />
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</Setter.Value>
							</Setter>
							<Setter Property="Padding"
									Value="4,-1,0,0" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter Property="BorderBrush"
									TargetName="checkBoxBorder"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter Property="Fill"
									TargetName="indeterminateMark"
									Value="{DynamicResource ActiveForegroundBrushKey}" />
							<Setter Property="Fill"
									TargetName="optionMark"
									Value="{DynamicResource ActiveForegroundBrushKey}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="BorderBrush"
									TargetName="checkBoxBorder"
									Value="{DynamicResource InactiveBorderBrushKey}" />
							<Setter Property="Fill"
									TargetName="indeterminateMark"
									Value="{DynamicResource InactiveForegroundBrushKey}" />
							<Setter Property="Fill"
									TargetName="optionMark"
									Value="{DynamicResource InactiveForegroundBrushKey}" />
							<Setter Property="Background"
									TargetName="checkBoxBorder"
									Value="Transparent" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="True">
							<Setter Property="BorderBrush"
									TargetName="checkBoxBorder"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter Property="Background"
									TargetName="checkBoxBorder"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter Property="Fill"
									TargetName="optionMark"
									Value="{DynamicResource ActiveForegroundBrushKey}" />
							<Setter Property="Fill"
									TargetName="indeterminateMark"
									Value="{DynamicResource ActiveForegroundBrushKey}" />
						</Trigger>
						<Trigger Property="IsChecked"
								 Value="True">
							<Setter Property="Opacity"
									TargetName="optionMark"
									Value="1" />
							<Setter Property="Opacity"
									TargetName="indeterminateMark"
									Value="0" />
						</Trigger>
						<Trigger Property="IsChecked"
								 Value="{x:Null}">
							<Setter Property="Opacity"
									TargetName="optionMark"
									Value="0" />
							<Setter Property="Opacity"
									TargetName="indeterminateMark"
									Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style TargetType="{x:Type RadioButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="True" />
		<Setter Property="Background"
				Value="{DynamicResource ActiveBackgroundBrushKey}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource ActiveBorderBrushKey}" />
		<Setter Property="Foreground"
				Value="{DynamicResource ActiveForegroundBrushKey}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="HorizontalContentAlignment"
				Value="Left" />
		<Setter Property="VerticalAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Padding"
				Value="4,1,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Grid x:Name="templateRoot"
						  Background="Transparent"
						  SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border x:Name="radioButtonBorder"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								CornerRadius="100"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="1,1,2,1"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<Grid x:Name="markGrid"
								  Margin="3">
								<Ellipse x:Name="optionMark"
										 MinWidth="5"
										 MinHeight="5"
										 Opacity="0"
										 Fill="{DynamicResource ForegroundBrushKey}" />
							</Grid>
						</Border>
						<ContentPresenter x:Name="contentPresenter"
										  Grid.Column="1"
										  Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  ContentStringFormat="{TemplateBinding ContentStringFormat}"
										  Focusable="False"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  Margin="{TemplateBinding Padding}"
										  RecognizesAccessKey="True"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent"
								 Value="True">
							<Setter Property="FocusVisualStyle"
									Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
							<Setter Property="Padding"
									Value="4,-1,0,0" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter Property="BorderBrush"
									TargetName="radioButtonBorder"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter Property="Fill"
									TargetName="optionMark"
									Value="{DynamicResource ActiveForegroundBrushKey}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="BorderBrush"
									TargetName="radioButtonBorder"
									Value="{DynamicResource InactiveBorderBrushKey}" />
							<Setter Property="Background"
									TargetName="radioButtonBorder"
									Value="Transparent" />
							<Setter Property="Fill"
									TargetName="optionMark"
									Value="{DynamicResource InactiveForegroundBrushKey}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="True">
							<Setter Property="Background"
									TargetName="radioButtonBorder"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter Property="BorderBrush"
									TargetName="radioButtonBorder"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter Property="Fill"
									TargetName="optionMark"
									Value="{DynamicResource ActiveForegroundBrushKey}" />
						</Trigger>
						<Trigger Property="IsChecked"
								 Value="True">
							<Setter Property="Opacity"
									TargetName="optionMark"
									Value="1" />
						</Trigger>
						<Trigger Property="GroupName"
								 Value="" />
						<Trigger Property="IsChecked"
								 Value="{x:Null}">
							<Setter Property="Opacity"
									TargetName="optionMark"
									Value="0.56" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style TargetType="{x:Type ScrollBar}">
		<Setter Property="Stylus.IsPressAndHoldEnabled"
				Value="False" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Background"
				Value="{DynamicResource ActiveBackgroundBrushKey}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource ActiveBorderBrushKey}" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="BorderThickness"
				Value="1,0" />
		<Setter Property="Width"
				Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
		<Setter Property="MinWidth"
				Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid x:Name="Bg"
						  SnapsToDevicePixels="True">
						<Grid.RowDefinitions>
							<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
							<RowDefinition Height="1E-05*" />
							<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
						</Grid.RowDefinitions>
						<Border BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								Grid.Row="1" />
						<RepeatButton x:Name="PART_LineUpButton"
									  Grid.Row="0"
									  Command="ScrollBar.LineUpCommand"
									  IsEnabled="{TemplateBinding IsMouseOver}"
									  BorderThickness="1,1,1,0">
							<RepeatButton.Style>
								<Style TargetType="{x:Type RepeatButton}">
									<Setter Property="FocusVisualStyle"
											Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
									<Setter Property="BorderThickness"
											Value="1" />
									<Setter Property="HorizontalContentAlignment"
											Value="Center" />
									<Setter Property="VerticalContentAlignment"
											Value="Center" />
									<Setter Property="Padding"
											Value="1" />
									<Setter Property="Focusable"
											Value="False" />
									<Setter Property="IsTabStop"
											Value="False" />
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate TargetType="{x:Type RepeatButton}">
												<Border x:Name="border"
														BorderBrush="{DynamicResource ActiveBorderBrushKey}"
														BorderThickness="{TemplateBinding BorderThickness}"
														Background="{DynamicResource ActiveBackgroundBrushKey}"
														SnapsToDevicePixels="True">
													<ContentPresenter x:Name="contentPresenter"
																	  ContentTemplate="{TemplateBinding ContentTemplate}"
																	  Content="{TemplateBinding Content}"
																	  ContentStringFormat="{TemplateBinding ContentStringFormat}"
																	  Focusable="False"
																	  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																	  Margin="{TemplateBinding Padding}"
																	  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
																	  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
												</Border>
												<ControlTemplate.Triggers>
													<Trigger Property="IsPressed"
															 Value="True">
														<Setter Property="Background"
																TargetName="border"
																Value="{DynamicResource AccentBrushKey}" />
														<Setter Property="BorderBrush"
																TargetName="border"
																Value="{DynamicResource AccentBrushKey}" />
													</Trigger>
												</ControlTemplate.Triggers>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
								</Style>
							</RepeatButton.Style>
							<Path x:Name="ArrowTop"
								  Data="M0,4 C0,4 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z"
								  Fill="{DynamicResource ForegroundBrushKey}"
								  Stretch="Uniform"
								  Height="5.5"
								  Width="12" />
						</RepeatButton>
						<Track x:Name="PART_Track"
							   IsDirectionReversed="True"
							   IsEnabled="{TemplateBinding IsMouseOver}"
							   Grid.Row="1">
							<Track.DecreaseRepeatButton>
								<RepeatButton Command="ScrollBar.PageUpCommand">
									<RepeatButton.Style>
										<Style TargetType="{x:Type RepeatButton}">
											<Setter Property="OverridesDefaultStyle"
													Value="True" />
											<Setter Property="Background"
													Value="Transparent" />
											<Setter Property="Focusable"
													Value="False" />
											<Setter Property="IsTabStop"
													Value="False" />
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type RepeatButton}">
														<Rectangle Fill="{TemplateBinding Background}"
																   Height="{TemplateBinding Height}"
																   Width="{TemplateBinding Width}" />
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</RepeatButton.Style>
								</RepeatButton>
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="ScrollBar.PageDownCommand">
									<RepeatButton.Style>
										<Style TargetType="{x:Type RepeatButton}">
											<Setter Property="OverridesDefaultStyle"
													Value="True" />
											<Setter Property="Background"
													Value="Transparent" />
											<Setter Property="Focusable"
													Value="False" />
											<Setter Property="IsTabStop"
													Value="False" />
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type RepeatButton}">
														<Rectangle Fill="{TemplateBinding Background}"
																   Height="{TemplateBinding Height}"
																   Width="{TemplateBinding Width}" />
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</RepeatButton.Style>
								</RepeatButton>
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb>
									<Thumb.Style>
										<Style TargetType="{x:Type Thumb}">
											<Setter Property="OverridesDefaultStyle"
													Value="True" />
											<Setter Property="IsTabStop"
													Value="False" />
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type Thumb}">
														<Rectangle x:Name="rectangle"
																   Fill="{DynamicResource HighlightBackgroundBrushKey}"
																   Height="{TemplateBinding Height}"
																   SnapsToDevicePixels="True"
																   Margin="3,0"
																   Width="{TemplateBinding Width}" />
														<ControlTemplate.Triggers>
															<Trigger Property="IsMouseOver"
																	 Value="True">
																<Setter Property="Fill"
																		TargetName="rectangle"
																		Value="{DynamicResource Highlight2BackgroundBrushKey}" />
															</Trigger>
															<Trigger Property="IsDragging"
																	 Value="True">
																<Setter Property="Fill"
																		TargetName="rectangle"
																		Value="{DynamicResource Highlight3BackgroundBrushKey}" />
															</Trigger>
														</ControlTemplate.Triggers>
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</Thumb.Style>
								</Thumb>
							</Track.Thumb>
						</Track>
						<RepeatButton x:Name="PART_LineDownButton"
									  Command="ScrollBar.LineDownCommand"
									  IsEnabled="{TemplateBinding IsMouseOver}"
									  BorderThickness="1,0,1,1"
									  Grid.Row="2">
							<RepeatButton.Style>
								<Style TargetType="{x:Type RepeatButton}">
									<Setter Property="FocusVisualStyle"
											Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
									<Setter Property="BorderThickness"
											Value="1" />
									<Setter Property="HorizontalContentAlignment"
											Value="Center" />
									<Setter Property="VerticalContentAlignment"
											Value="Center" />
									<Setter Property="Padding"
											Value="1" />
									<Setter Property="Focusable"
											Value="False" />
									<Setter Property="IsTabStop"
											Value="False" />
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate TargetType="{x:Type RepeatButton}">
												<Border x:Name="border"
														BorderBrush="{DynamicResource ActiveBorderBrushKey}"
														BorderThickness="{TemplateBinding BorderThickness}"
														Background="{DynamicResource ActiveBackgroundBrushKey}"
														SnapsToDevicePixels="True">
													<ContentPresenter x:Name="contentPresenter"
																	  ContentTemplate="{TemplateBinding ContentTemplate}"
																	  Content="{TemplateBinding Content}"
																	  ContentStringFormat="{TemplateBinding ContentStringFormat}"
																	  Focusable="False"
																	  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																	  Margin="{TemplateBinding Padding}"
																	  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
																	  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
												</Border>
												<ControlTemplate.Triggers>
													<Trigger Property="IsPressed"
															 Value="True">
														<Setter Property="Background"
																TargetName="border"
																Value="{DynamicResource AccentBrushKey}" />
														<Setter Property="BorderBrush"
																TargetName="border"
																Value="{DynamicResource AccentBrushKey}" />
													</Trigger>
												</ControlTemplate.Triggers>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
								</Style>
							</RepeatButton.Style>
							<Path x:Name="ArrowBottom"
								  Data="M0,2.5 C0,2.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z"
								  Fill="{DynamicResource ForegroundBrushKey}"
								  Stretch="Uniform"
								  Height="5.5"
								  Width="12" />
						</RepeatButton>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}"
										   Value="true" />
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Fill"
									TargetName="ArrowBottom"
									Value="{DynamicResource HighlightForegroundBrushKey}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}"
										   Value="true" />
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Fill"
									TargetName="ArrowTop"
									Value="{DynamicResource HighlightForegroundBrushKey}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}"
										   Value="true" />
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Fill"
									TargetName="ArrowBottom"
									Value="{DynamicResource AccentBrushKey}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}"
										   Value="true" />
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Fill"
									TargetName="ArrowTop"
									Value="{DynamicResource AccentBrushKey}" />
						</MultiDataTrigger>

						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="Fill"
									TargetName="ArrowTop"
									Value="{DynamicResource SemiactiveBackgroundBrushKey}" />
							<Setter Property="Fill"
									TargetName="ArrowBottom"
									Value="{DynamicResource SemiactiveBackgroundBrushKey}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation"
					 Value="Horizontal">
				<Setter Property="Width"
						Value="Auto" />
				<Setter Property="MinWidth"
						Value="0" />
				<Setter Property="Height"
						Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
				<Setter Property="MinHeight"
						Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
				<Setter Property="BorderThickness"
						Value="0,1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid x:Name="Bg"
								  SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
									<ColumnDefinition Width="1E-05*" />
									<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
								</Grid.ColumnDefinitions>
								<Border BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										Background="{TemplateBinding Background}"
										Grid.Column="1" />
								<RepeatButton x:Name="PART_LineLeftButton"
											  Grid.Column="0"
											  Command="ScrollBar.LineLeftCommand"
											  IsEnabled="{TemplateBinding IsMouseOver}"
											  BorderThickness="1,1,0,1">
									<RepeatButton.Style>
										<Style TargetType="{x:Type RepeatButton}">
											<Setter Property="FocusVisualStyle"
													Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
											<Setter Property="BorderThickness"
													Value="1" />
											<Setter Property="HorizontalContentAlignment"
													Value="Center" />
											<Setter Property="VerticalContentAlignment"
													Value="Center" />
											<Setter Property="Padding"
													Value="1" />
											<Setter Property="Focusable"
													Value="False" />
											<Setter Property="IsTabStop"
													Value="False" />
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type RepeatButton}">
														<Border x:Name="border"
																BorderBrush="{DynamicResource ActiveBorderBrushKey}"
																BorderThickness="{TemplateBinding BorderThickness}"
																Background="{DynamicResource ActiveBackgroundBrushKey}"
																SnapsToDevicePixels="True">
															<ContentPresenter x:Name="contentPresenter"
																			  ContentTemplate="{TemplateBinding ContentTemplate}"
																			  Content="{TemplateBinding Content}"
																			  ContentStringFormat="{TemplateBinding ContentStringFormat}"
																			  Focusable="False"
																			  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																			  Margin="{TemplateBinding Padding}"
																			  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
																			  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
														</Border>
														<ControlTemplate.Triggers>
															<Trigger Property="IsPressed"
																	 Value="True">
																<Setter Property="Background"
																		TargetName="border"
																		Value="{DynamicResource AccentBrushKey}" />
																<Setter Property="BorderBrush"
																		TargetName="border"
																		Value="{DynamicResource AccentBrushKey}" />
															</Trigger>
														</ControlTemplate.Triggers>
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</RepeatButton.Style>
									<Path x:Name="ArrowLeft"
										  Data="M3.18,7 C3.18,7 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z"
										  Fill="{DynamicResource ForegroundBrushKey}"
										  Stretch="Uniform"
										  Height="12"
										  Width="5.5" />
								</RepeatButton>
								<Track x:Name="PART_Track"
									   Grid.Column="1"
									   IsEnabled="{TemplateBinding IsMouseOver}">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="ScrollBar.PageLeftCommand">
											<RepeatButton.Style>
												<Style TargetType="{x:Type RepeatButton}">
													<Setter Property="OverridesDefaultStyle"
															Value="True" />
													<Setter Property="Background"
															Value="Transparent" />
													<Setter Property="Focusable"
															Value="False" />
													<Setter Property="IsTabStop"
															Value="False" />
													<Setter Property="Template">
														<Setter.Value>
															<ControlTemplate TargetType="{x:Type RepeatButton}">
																<Rectangle Fill="{TemplateBinding Background}"
																		   Height="{TemplateBinding Height}"
																		   Width="{TemplateBinding Width}" />
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</RepeatButton.Style>
										</RepeatButton>
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="ScrollBar.PageRightCommand">
											<RepeatButton.Style>
												<Style TargetType="{x:Type RepeatButton}">
													<Setter Property="OverridesDefaultStyle"
															Value="True" />
													<Setter Property="Background"
															Value="Transparent" />
													<Setter Property="Focusable"
															Value="False" />
													<Setter Property="IsTabStop"
															Value="False" />
													<Setter Property="Template">
														<Setter.Value>
															<ControlTemplate TargetType="{x:Type RepeatButton}">
																<Rectangle Fill="{TemplateBinding Background}"
																		   Height="{TemplateBinding Height}"
																		   Width="{TemplateBinding Width}" />
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</RepeatButton.Style>
										</RepeatButton>
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb>
											<Thumb.Style>
												<Style TargetType="{x:Type Thumb}">
													<Setter Property="OverridesDefaultStyle"
															Value="True" />
													<Setter Property="IsTabStop"
															Value="False" />
													<Setter Property="Template">
														<Setter.Value>
															<ControlTemplate TargetType="{x:Type Thumb}">
																<Rectangle x:Name="rectangle"
																		   Fill="{DynamicResource HighlightBackgroundBrushKey}"
																		   Height="{TemplateBinding Height}"
																		   SnapsToDevicePixels="True"
																		   Margin="0,3"
																		   Width="{TemplateBinding Width}" />
																<ControlTemplate.Triggers>
																	<Trigger Property="IsMouseOver"
																			 Value="True">
																		<Setter Property="Fill"
																				TargetName="rectangle"
																				Value="{DynamicResource Highlight2BackgroundBrushKey}" />
																	</Trigger>
																	<Trigger Property="IsDragging"
																			 Value="True">
																		<Setter Property="Fill"
																				TargetName="rectangle"
																				Value="{DynamicResource Highlight3BackgroundBrushKey}" />
																	</Trigger>
																</ControlTemplate.Triggers>
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</Thumb.Style>
										</Thumb>
									</Track.Thumb>
								</Track>
								<RepeatButton x:Name="PART_LineRightButton"
											  Grid.Column="2"
											  Command="ScrollBar.LineRightCommand"
											  IsEnabled="{TemplateBinding IsMouseOver}"
											  BorderThickness="0,1,1,1">
									<RepeatButton.Style>
										<Style TargetType="{x:Type RepeatButton}">
											<Setter Property="FocusVisualStyle"
													Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
											<Setter Property="BorderThickness"
													Value="1" />
											<Setter Property="HorizontalContentAlignment"
													Value="Center" />
											<Setter Property="VerticalContentAlignment"
													Value="Center" />
											<Setter Property="Padding"
													Value="1" />
											<Setter Property="Focusable"
													Value="False" />
											<Setter Property="IsTabStop"
													Value="False" />
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type RepeatButton}">
														<Border x:Name="border"
																BorderBrush="{DynamicResource ActiveBorderBrushKey}"
																BorderThickness="{TemplateBinding BorderThickness}"
																Background="{DynamicResource ActiveBackgroundBrushKey}"
																SnapsToDevicePixels="True">
															<ContentPresenter x:Name="contentPresenter"
																			  ContentTemplate="{TemplateBinding ContentTemplate}"
																			  Content="{TemplateBinding Content}"
																			  ContentStringFormat="{TemplateBinding ContentStringFormat}"
																			  Focusable="False"
																			  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																			  Margin="{TemplateBinding Padding}"
																			  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
																			  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
														</Border>
														<ControlTemplate.Triggers>
															<Trigger Property="IsPressed"
																	 Value="True">
																<Setter Property="Background"
																		TargetName="border"
																		Value="{DynamicResource AccentBrushKey}" />
																<Setter Property="BorderBrush"
																		TargetName="border"
																		Value="{DynamicResource AccentBrushKey}" />
															</Trigger>
														</ControlTemplate.Triggers>
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</RepeatButton.Style>
									<Path x:Name="ArrowRight"
										  Data="M1.81,7 C1.81,7 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z"
										  Fill="{DynamicResource ForegroundBrushKey}"
										  Stretch="Uniform"
										  Height="12"
										  Width="5" />
								</RepeatButton>
							</Grid>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}"
												   Value="true" />
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}"
												   Value="true" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Fill"
											TargetName="ArrowRight"
											Value="{DynamicResource HighlightForegroundBrushKey}" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}"
												   Value="true" />
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}"
												   Value="true" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Fill"
											TargetName="ArrowLeft"
											Value="{DynamicResource HighlightForegroundBrushKey}" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}"
												   Value="true" />
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}"
												   Value="false" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Fill"
											TargetName="ArrowRight"
											Value="{DynamicResource AccentBrushKey}" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}"
												   Value="true" />
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}"
												   Value="false" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Fill"
											TargetName="ArrowLeft"
											Value="{DynamicResource AccentBrushKey}" />
								</MultiDataTrigger>
								<Trigger Property="IsEnabled"
										 Value="False">
									<Setter Property="Fill"
											TargetName="ArrowLeft"
											Value="{DynamicResource SemiactiveBackgroundBrushKey}" />
									<Setter Property="Fill"
											TargetName="ArrowRight"
											Value="{DynamicResource SemiactiveBackgroundBrushKey}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>



	<Style TargetType="{x:Type controls:CallMethodButton}">
		<Setter Property="Background"
				Value="{DynamicResource BackgroundBrushKey}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource BorderBrushKey}" />
		<Setter Property="Foreground"
				Value="{DynamicResource ActiveForegroundBrushKey}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Padding"
				Value="8,2" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="FocusVisualStyle"
				Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:CallMethodButton}">
					<Border x:Name="border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Background="{TemplateBinding Background}">
						<ContentPresenter x:Name="contentPresenter"
										  Margin="{TemplateBinding Padding}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource ActiveBackgroundBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
			</Trigger>
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource AccentBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
				<Setter Property="Foreground"
						Value="{DynamicResource AccentForegroundBrushKey}" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter Property="Background"
						Value="{DynamicResource InactiveBackgroundBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource InactiveBorderBrushKey}" />
				<Setter Property="Foreground"
						Value="{DynamicResource InactiveForegroundBrushKey}" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style TargetType="{x:Type controls:PromptTextBox}">
		<Setter Property="Background"
				Value="{DynamicResource SemiactiveBackgroundBrushKey}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource SemiactiveBorderBrushKey}" />
		<Setter Property="Foreground"
				Value="{DynamicResource ActiveForegroundBrushKey}" />
		<Setter Property="PromptBrush"
				Value="{DynamicResource InactiveForegroundBrushKey}" />
		<Setter Property="BorderThickness"
				Value="1,1,1,1" />
		<Setter Property="Padding"
				Value="1" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Text"
				Value="" />
		<Setter Property="Prompt"
				Value="プロンプト" />
		<Setter Property="FocusVisualStyle"
				Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:PromptTextBox}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="0"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Grid>
							<Border Margin="2"
									x:Name="promptText"
									Visibility="Hidden"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
								<TextBlock Text="{TemplateBinding Prompt}"
										   Foreground="{TemplateBinding PromptBrush}"
										   Margin="{TemplateBinding Padding}"
										   TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}" />
							</Border>
							<ScrollViewer x:Name="PART_ContentHost"
										  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
										  HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
										  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
										  VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
										  Margin="{TemplateBinding Padding}"
										  Background="Transparent" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocusWithin"
										   Value="False" />
								<Condition Property="Text"
										   Value="" />
							</MultiTrigger.Conditions>
							<Setter TargetName="promptText"
									Property="Visibility"
									Value="Visible" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource ActiveBackgroundBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
				<Setter Property="PromptBrush"
						Value="{DynamicResource ForegroundBrushKey}" />
			</Trigger>

			<Trigger Property="IsKeyboardFocusWithin"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource ActiveBackgroundBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
			</Trigger>

			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter Property="Background"
						Value="{DynamicResource InactiveBackgroundBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource InactiveBorderBrushKey}" />
				<Setter Property="Foreground"
						Value="{DynamicResource InactiveForegroundBrushKey}" />
				<Setter Property="PromptBrush"
						Value="Transparent" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style TargetType="{x:Type controls:PromptComboBox}">
		<Setter Property="Background"
				Value="{DynamicResource SemiactiveBackgroundBrushKey}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource SemiactiveBorderBrushKey}" />
		<Setter Property="Foreground"
				Value="{DynamicResource ActiveForegroundBrushKey}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Padding"
				Value="1" />
		<Setter Property="Prompt"
				Value="プロンプト" />
		<Setter Property="PromptBrush"
				Value="{DynamicResource InactiveForegroundBrushKey}" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="FocusVisualStyle"
				Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ComboBoxItem}">
					<Setter Property="SnapsToDevicePixels"
							Value="true" />
					<Setter Property="OverridesDefaultStyle"
							Value="true" />
					<Setter Property="Background"
							Value="Transparent" />
					<Setter Property="FocusVisualStyle"
							Value="{x:Null}" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ComboBoxItem}">
								<Border CornerRadius="0"
										Padding="2"
										Background="{TemplateBinding Background}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
									<ContentPresenter />
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="IsHighlighted"
											 Value="True">
										<Setter Property="Background"
												Value="{DynamicResource HighlightBackgroundBrushKey}" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:PromptComboBox}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Border x:Name="border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto"
													  MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
								</Grid.ColumnDefinitions>
								<Border Margin="1"
										x:Name="prompt"
										Visibility="Hidden">
									<TextBlock x:Name="promptText"
											   Text="{TemplateBinding Prompt}"
											   Foreground="{TemplateBinding PromptBrush}"
											   Margin="{TemplateBinding Padding}"
											   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											   TextOptions.TextFormattingMode="Display" />
								</Border>

								<ToggleButton x:Name="toggleButton"
											  Grid.Column="0"
											  Grid.ColumnSpan="2"
											  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
											  Foreground="{DynamicResource InactiveForegroundBrushKey}"
											  OverridesDefaultStyle="True"
											  IsTabStop="False"
											  Focusable="False"
											  ClickMode="Press">
									<ToggleButton.Template>
										<ControlTemplate TargetType="{x:Type ToggleButton}">
											<Border Background="Transparent">
												<Border x:Name="border"
														Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
														HorizontalAlignment="Right"
														Background="{TemplateBinding Background}"
														BorderBrush="{TemplateBinding BorderBrush}"
														BorderThickness="{TemplateBinding BorderThickness}">
													<Path Data="M 0.0,0.0 L 3.5,4.0 7.0,0.0 z"
														  Fill="{TemplateBinding Foreground}"
														  HorizontalAlignment="Center"
														  VerticalAlignment="Center" />
												</Border>
											</Border>
										</ControlTemplate>
									</ToggleButton.Template>
								</ToggleButton>

								<ContentPresenter x:Name="ContentSite"
												  Grid.Column="0"
												  Content="{TemplateBinding SelectionBoxItem}"
												  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
												  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
												  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												  IsHitTestVisible="False"
												  Margin="2" />

								<TextBox x:Name="PART_EditableTextBox"
										 Grid.Column="0"
										 Text="{Binding EditableText, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PromptComboBox}}, UpdateSourceTrigger=PropertyChanged}"
										 Foreground="{TemplateBinding Foreground}"
										 Margin="{TemplateBinding Padding}"
										 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										 CaretBrush="{DynamicResource ForegroundBrushKey}"
										 TextOptions.TextFormattingMode="Display"
										 FocusVisualStyle="{x:Null}">
									<TextBox.Template>
										<ControlTemplate TargetType="{x:Type TextBox}">
											<ScrollViewer x:Name="PART_ContentHost"
														  HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
														  VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
														  Margin="1" />
										</ControlTemplate>
									</TextBox.Template>
								</TextBox>
							</Grid>
						</Border>

						<Popup x:Name="PART_Popup"
							   MinWidth="{TemplateBinding ActualWidth}"
							   IsOpen="{TemplateBinding IsDropDownOpen}"
							   AllowsTransparency="True"
							   PopupAnimation="Slide"
							   Focusable="False"
							   Placement="Bottom"
							   VerticalOffset="2"
							   FocusVisualStyle="{x:Null}">
							<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								  MaxHeight="{TemplateBinding MaxDropDownHeight}">
								<Border x:Name="dropdown"
										Background="{DynamicResource BackgroundBrushKey}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="1">
									<ScrollViewer VerticalScrollBarVisibility="Auto">
										<StackPanel IsItemsHost="True"
													KeyboardNavigation.DirectionalNavigation="Contained" />
									</ScrollViewer>
								</Border>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocusWithin"
										   Value="False" />
								<Condition Property="Text"
										   Value="" />
							</MultiTrigger.Conditions>
							<Setter TargetName="prompt"
									Property="Visibility"
									Value="Visible" />
						</MultiTrigger>
						<Trigger Property="IsEditable"
								 Value="False">
							<Setter TargetName="PART_EditableTextBox"
									Property="Visibility"
									Value="Collapsed" />
						</Trigger>
						<Trigger Property="HasItems"
								 Value="false">
							<Setter TargetName="dropdown"
									Property="MinHeight"
									Value="100" />
						</Trigger>
						<Trigger Property="IsGrouping"
								 Value="true">
							<Setter Property="ScrollViewer.CanContentScroll"
									Value="false" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter Property="Foreground"
									TargetName="toggleButton"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter Property="BorderBrush"
									TargetName="toggleButton"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter Property="Background"
									TargetName="toggleButton"
									Value="{DynamicResource BackgroundBrushKey}" />
							<Setter TargetName="border"
									Property="Background"
									Value="{DynamicResource ActiveBackgroundBrushKey}" />
							<Setter TargetName="promptText"
									Property="Foreground"
									Value="{DynamicResource ForegroundBrushKey}" />
						</Trigger>
						<Trigger SourceName="PART_EditableTextBox"
								 Property="IsKeyboardFocusWithin"
								 Value="True">
							<Setter TargetName="border"
									Property="Background"
									Value="{DynamicResource ActiveBackgroundBrushKey}" />
						</Trigger>
						<Trigger SourceName="PART_Popup"
								 Property="IsOpen"
								 Value="True">
							<Setter Property="Background"
									TargetName="toggleButton"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter Property="Foreground"
									TargetName="toggleButton"
									Value="{DynamicResource AccentForegroundBrushKey}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter TargetName="border"
									Property="BorderBrush"
									Value="{DynamicResource InactiveBorderBrushKey}" />
							<Setter TargetName="border"
									Property="Background"
									Value="{DynamicResource InactiveBackgroundBrushKey}" />
							<Setter TargetName="PART_EditableTextBox"
									Property="Foreground"
									Value="{DynamicResource InactiveForegroundBrushKey}" />
							<Setter TargetName="promptText"
									Property="Foreground"
									Value="Transparent" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style TargetType="{x:Type controls:ExpanderButton}">
		<Setter Property="Background"
				Value="{DynamicResource SemiactiveBackgroundBrushKey}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource SemiactiveBorderBrushKey}" />
		<Setter Property="Foreground"
				Value="{DynamicResource ForegroundBrushKey}" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:ExpanderButton}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<ContentPresenter x:Name="content"
										  Grid.Column="1"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						<Grid x:Name="expander"
							  Grid.Column="2"
							  Margin="5,0,0,0"
							  Width="19"
							  Height="19">
							<Ellipse x:Name="circle"
									 Fill="{DynamicResource SemiactiveBackgroundBrushKey}"
									 Stroke="{DynamicResource ForegroundBrushKey}" />
							<Path x:Name="arrow"
								  Data="M 1,1.5 L 4.5,5 8,1.5"
								  Stroke="{DynamicResource ForegroundBrushKey}"
								  StrokeThickness="2"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center" />
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="Direction"
								 Value="Right">
							<Setter TargetName="expander"
									Property="Grid.Column"
									Value="0" />
							<Setter TargetName="expander"
									Property="Margin"
									Value="0,0,0,5" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter TargetName="circle"
									Property="Fill"
									Value="{DynamicResource ActiveBackgroundBrushKey}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="True">
							<Setter TargetName="circle"
									Property="Fill"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter TargetName="circle"
									Property="Stroke"
									Value="{DynamicResource HighlightForegroundBrushKey}" />
							<Setter TargetName="arrow"
									Property="Stroke"
									Value="{DynamicResource HighlightForegroundBrushKey}" />
						</Trigger>
						<Trigger Property="IsChecked"
								 Value="True">
							<Setter TargetName="arrow"
									Property="Data"
									Value="M 1,4.5 L 4.5,1 8,4.5" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter TargetName="circle"
									Property="Fill"
									Value="{DynamicResource InactiveBackgroundBrushKey}" />
							<Setter TargetName="circle"
									Property="Stroke"
									Value="{DynamicResource InactiveForegroundBrushKey}" />
							<Setter TargetName="arrow"
									Property="Stroke"
									Value="{DynamicResource InactiveForegroundBrushKey}" />
							<Setter TargetName="content"
									Property="Opacity"
									Value="0.5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



	<Style TargetType="{x:Type controls:LinkButton}">
		<Setter Property="HorizontalContentAlignment"
				Value="Left" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Foreground"
				Value="{DynamicResource LinkForegroundBrushKey}" />
		<Setter Property="Cursor"
				Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:LinkButton}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
						<TextBlock x:Name="text"
								   Text="{TemplateBinding Text}"
								   Foreground="{TemplateBinding Foreground}"
								   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								   Margin="{TemplateBinding Padding}"
								   TextTrimming="{TemplateBinding TextTrimming}"
								   TextWrapping="{TemplateBinding TextWrapping}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter TargetName="text"
									Property="TextDecorations"
									Value="Underline" />
							<Setter TargetName="text"
									Property="Foreground"
									Value="{DynamicResource LinkForegroundBrushKey}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="True">
							<Setter TargetName="text"
									Property="TextDecorations"
									Value="Underline" />
							<Setter TargetName="text"
									Property="Foreground"
									Value="{DynamicResource ActiveLinkForegroundBrushKey}" />
						</Trigger>
						<EventTrigger RoutedEvent="FrameworkElement.Loaded" />
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	
	
	<Style TargetType="{x:Type controls:BindableRichTextBox}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Foreground"
				Value="{DynamicResource ActiveForegroundBrushKey}" />
		<Setter Property="AutoWordSelection"
				Value="False" />
		<Setter Property="IsReadOnly"
				Value="True" />
		<Setter Property="AcceptsReturn"
				Value="True" />
		<Setter Property="FocusVisualStyle"
				Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:BindableRichTextBox}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Padding="{TemplateBinding Padding}">
						<ScrollViewer x:Name="PART_ContentHost"
									  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									  HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
									  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									  VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
									  Margin="-5,0" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



	<Style TargetType="controls:TabView">
		<Setter Property="SelectionMode"
				Value="Single" />
		<Setter Property="Background"
				Value="Transparent" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:TabView}">
					<StackPanel Background="{TemplateBinding Background}">
						<StackPanel IsItemsHost="True" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ListBoxItem}">
					<Setter Property="Foreground"
							Value="{DynamicResource ActiveForegroundBrushKey}" />
					<Setter Property="Height"
							Value="38" />
					<Setter Property="IsSelected"
							Value="{Binding IsSelected}" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ListBoxItem}">
								<Border Background="{TemplateBinding Background}">
									<ContentPresenter />
								</Border>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<Setter Property="FocusVisualStyle"
							Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
					<Style.Triggers>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter Property="Background"
									Value="{DynamicResource AccentHighlightBrushKey}" />
							<Setter Property="Foreground"
									Value="{DynamicResource AccentForegroundBrushKey}" />
						</Trigger>
						<Trigger Property="IsSelected"
								 Value="True">
							<Setter Property="Background"
									Value="{DynamicResource AccentBrushKey}" />
							<Setter Property="Foreground"
									Value="{DynamicResource AccentForegroundBrushKey}" />
						</Trigger>
					</Style.Triggers>
				</Style>
			</Setter.Value>
		</Setter>

		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate DataType="{x:Type controls:ITabItem}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="20" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="25" />
						</Grid.ColumnDefinitions>
						<TextBlock Grid.Column="1"
								   Text="{Binding Name}"
								   FontSize="14"
								   Foreground="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=Foreground}"
								   VerticalAlignment="Center"
								   TextTrimming="CharacterEllipsis" />
						<controls:Badge Grid.Column="1"
										Grid.ColumnSpan="2"
										Count="{Binding Badge}"
										Margin="0,4,4,0"
										HorizontalAlignment="Right"
										VerticalAlignment="Top" />
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style TargetType="controls:Badge">
		<Setter Property="Width"
				Value="22" />
		<Setter Property="Height"
				Value="22" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="controls:Badge">
					<Grid>
						<Border CornerRadius="100"
								Background="{DynamicResource AccentHighlightBrushKey}"
								BorderThickness="0"
								BorderBrush="{DynamicResource AccentHighlightBrushKey}">
						</Border>
						<TextBlock x:Name="PART_CountHost"
								   x:FieldModifier="private"
								   FontSize="11"
								   FontFamily="Segoe UI"
								   Foreground="{DynamicResource AccentForegroundBrushKey}"
								   VerticalAlignment="Center"
								   HorizontalAlignment="Center" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="ChromeIconBaseKey"
		   TargetType="{x:Type Path}">
		<Setter Property="Width"
				Value="12" />
		<Setter Property="Fill"
				Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}, Path=Foreground}" />
		<Setter Property="Stretch"
				Value="Uniform" />
		<Setter Property="SnapsToDevicePixels"
				Value="True" />
	</Style>

	<Style x:Key="MinimizeIconKey"
		   TargetType="{x:Type Path}"
		   BasedOn="{StaticResource ChromeIconBaseKey}">
		<Setter Property="Width"
				Value="10" />
		<Setter Property="Height"
				Value="9" />
		<Setter Property="Data"
				Value="M5,30 L25,30 L25,35 L5,35 z" />
		<Setter Property="VerticalAlignment"
				Value="Bottom" />
	</Style>

	<Style x:Key="MaximizeIconKey"
		   TargetType="{x:Type Path}"
		   BasedOn="{StaticResource ChromeIconBaseKey}">
		<Setter Property="Width"
				Value="11" />
		<Setter Property="Height"
				Value="11" />
		<Setter Property="Data"
				Value="M5,12.5 L5,32.5 L30.078125,32.5 L30.078125,12.5 z M2.5,7.5 L32.578125,7.5 L32.578125,35 L2.5,35 z" />
	</Style>

	<Style x:Key="NormalizeIconKey"
		   TargetType="{x:Type Path}"
		   BasedOn="{StaticResource ChromeIconBaseKey}">
		<Setter Property="Data"
				Value="M5,22.5 L5,32.5 L22.5,32.5 L22.5,22.5 z M12.5,12.5 L12.5,17.5 L25,17.5 L25,22.5 L30,22.5 L30,12.5 z M10,7.5 L32.5,7.5 L32.5,25 L25,25 L25,35 L2.5,35 L2.5,17.5 L10,17.5 z" />
	</Style>

	<Style x:Key="CloseIconKey"
		   TargetType="{x:Type Path}"
		   BasedOn="{StaticResource ChromeIconBaseKey}">
		<Setter Property="Width"
				Value="10" />
		<Setter Property="Height"
				Value="10" />
		<Setter Property="Data"
				Value="M48.578243,0 L57.856652,0 71.665367,15.433628 85.779,0 94.404,0 75.760063,19.752212 94.404,39.999999 85.125595,39.999999 71.229759,24.460176 56.98544,39.999999 48.404,39.999999 67.135063,20.141593 z" />
	</Style>

	<Style TargetType="{x:Type chrome:CaptionButton}">
		<Setter Property="Width"
				Value="34" />
		<Setter Property="Height"
				Value="26" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="BorderThickness"
				Value="0" />
		<Setter Property="SnapsToDevicePixels"
				Value="True" />
		<Setter Property="WindowChrome.IsHitTestVisibleInChrome"
				Value="True" />
		<Setter Property="FocusVisualStyle"
				Value="{x:Null}" />
		<Setter Property="IsTabStop"
				Value="False" />
		<Setter Property="Focusable"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type chrome:CaptionButton}">
					<Border x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Grid Margin="{TemplateBinding Padding}"
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<ContentPresenter x:Name="contentPresenter" />
							<Path x:Name="icon"
								  Fill="{TemplateBinding Foreground}"
								  Visibility="Collapsed" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="WindowAction"
								 Value="Minimize">
							<Setter TargetName="icon"
									Property="Style"
									Value="{DynamicResource MinimizeIconKey}" />
						</Trigger>
						<Trigger Property="WindowAction"
								 Value="Maximize">
							<Setter TargetName="icon"
									Property="Style"
									Value="{DynamicResource MaximizeIconKey}" />
						</Trigger>
						<Trigger Property="WindowAction"
								 Value="Normalize">
							<Setter TargetName="icon"
									Property="Style"
									Value="{DynamicResource NormalizeIconKey}" />
						</Trigger>
						<Trigger Property="WindowAction"
								 Value="Close">
							<Setter TargetName="icon"
									Property="Style"
									Value="{DynamicResource CloseIconKey}" />
						</Trigger>
						<Trigger Property="Content"
								 Value="{x:Null}">
							<Setter TargetName="icon"
									Property="Visibility"
									Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource ActiveBackgroundBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
				<Setter Property="Foreground"
						Value="{DynamicResource ActiveForegroundBrushKey}" />
			</Trigger>
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource AccentBrushKey}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
				<Setter Property="Foreground"
						Value="{DynamicResource AccentForegroundBrushKey}" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter Property="Opacity"
						Value="0.6" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style x:Key="ResizeGripIconElementKey"
		   TargetType="{x:Type Path}">
		<Setter Property="Data"
				Value="M6,0 L7,0 7,1 6,1 z M6,2 L6,3 7,3 7,2 z M6,4 L6,5 7,5 7,4 z M6,6 L6,7 7,7 7,6 z M0,6 L0,7 1,7 1,6 z M2,6 L2,7 3,7 3,6 z M4,6 L4,7 5,7 5,6 z M4,2 L4,3 5,3, 5,2 z M4,4 L4,5 5,5, 5,4 z M2,4 L2,5 3,5, 3,4 z" />
		<Setter Property="Fill"
				Value="{DynamicResource ForegroundBrushKey}" />
		<Setter Property="Margin"
				Value="2" />
		<Setter Property="Opacity"
				Value="0.5" />
		<Setter Property="HorizontalAlignment"
				Value="Right" />
		<Setter Property="VerticalAlignment"
				Value="Bottom" />
		<Setter Property="SnapsToDevicePixels"
				Value="True" />
	</Style>

	<Style x:Key="ResizeGripIconShadowElemenKey"
		   TargetType="{x:Type Path}"
		   BasedOn="{StaticResource ResizeGripIconElementKey}">
		<Setter Property="Fill"
				Value="{DynamicResource BackgroundBrushKey}" />
		<Setter Property="Margin"
				Value="3" />
	</Style>

	<Style TargetType="{x:Type chrome:ResizeGrip}">
		<Setter Property="Width"
				Value="16" />
		<Setter Property="Height"
				Value="16" />
		<Setter Property="HorizontalAlignment"
				Value="Right" />
		<Setter Property="VerticalAlignment"
				Value="Bottom" />
		<Setter Property="HorizontalContentAlignment"
				Value="Right" />
		<Setter Property="VerticalContentAlignment"
				Value="Bottom" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderThickness"
				Value="0" />
		<Setter Property="Visibility"
				Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowState, Converter={StaticResource WindowStateToVisiblityConverter}}" />
		<Setter Property="WindowChrome.IsHitTestVisibleInChrome"
				Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type chrome:ResizeGrip}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
						<Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<Path Style="{DynamicResource ResizeGripIconElementKey}" />
							<Path Style="{DynamicResource ResizeGripIconShadowElemenKey}" />
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>